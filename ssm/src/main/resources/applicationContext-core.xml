<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
		
		<!-- 开启spring注解支持：@Autowired、@Resource -->
		<context:annotation-config></context:annotation-config>
		
		<!-- 开启spring注解扫描，自动将标注了注解的类加入到ioc容器 -->
		<context:component-scan base-package="cn.itcast.service,cn.itcast.dao"></context:component-scan>
		
		<!-- 加载常量配置文件 -->
		<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:datasource.properties</value>
				</list>
			</property>
		</bean>
		
		<!-- 配置druid数据源，该数据源由阿里巴巴提供,需要在数据源非常消耗资源，所以我们在定义的时候常常要指定init-method和 destroy-method-->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="driverClassName" value="${driverClassName}"></property>
			<property name="url" value="${url}"></property>
			<property name="username" value="${username}"></property>
			<property name="password" value="${password}"></property>
			<!-- 初始化连接大小 -->
		    <property name="initialSize" value="0" />
		    <!-- 连接池最大使用连接数量 -->
		    <property name="maxActive" value="20" />
		    <!-- 连接池最大空闲 -->
		    <property name="maxIdle" value="20" />
		    <!-- 连接池最小空闲 -->
		    <property name="minIdle" value="0" />
		    <!-- 获取连接最大等待时间 -->
		    <property name="maxWait" value="60000" />
		
		    <!-- <property name="poolPreparedStatements" value="true" /> <property 
		      name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		
		    <property name="validationQuery" value="${validationQuery}" />
		    <property name="testOnBorrow" value="false" />
		    <property name="testOnReturn" value="false" />
		    <property name="testWhileIdle" value="true" />
		
		    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		    <property name="timeBetweenEvictionRunsMillis" value="60000" />
		    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		    <property name="minEvictableIdleTimeMillis" value="25200000" />
		
		    <!-- 打开removeAbandoned功能 -->
		    <property name="removeAbandoned" value="true" />
		    <!-- 1800秒，也就是30分钟 -->
		    <property name="removeAbandonedTimeout" value="1800" />
		    <!-- 关闭abanded连接时输出错误日志 -->
		    <property name="logAbandoned" value="true" />
		
		    <!-- 监控数据库 -->
		    <!-- <property name="filters" value="stat" /> -->
		    <property name="filters" value="mergeStat" />
		</bean>
		
		<!-- spring与mybatis整合 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 引用dataSource -->
	       	<property name="dataSource" ref="dataSource" />
	       	<!-- 指定mybatis主配置文件的位置 -->
	       	<!--  
	       	<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
	       	-->
	       	<!-- 指定mapping映射文件的位置 ,当mapper接口与映射文件在同一包中，且映射文件的namespace为接口的全路径是，改属性可以不用指定-->
	       	<!--  
	       	<property name="mapperLocations" value="classpath:cn/itcast/mapper/*.xml"/>
	       	-->
	       	<!-- 将该包下边的类自动生成别名，别名的规则为类的简单名称，如cn.itcast.User的别名为User -->
	       	<property name="typeAliasesPackage" value="cn.itcast.entity" />
	       	
	       	<property name="plugins">
	       		<array>
	       			<bean class="com.github.pagehelper.PageHelper">
	       				<property name="properties">
	       					<value>
		       					dialect=mysql
		       					offsetAsPageNum=true
		       					rowBoundsWithCount=true
		       					pageSizeZero=true
		       					reasonable=false
		       					supportMethodsArguments=true
		       					returnPageInfo=check
	       					</value>
	       				</property>
	       			</bean>
	       		</array>
	       	</property>
	    </bean>
	    
	   <!-- mapper扫描 -->
       <bean id="mapperScannerConfigurer" class ="org.mybatis.spring.mapper.MapperScannerConfigurer" >
       		<!-- 指定要扫描的mapper接口的包 -->
	        <property name ="basePackage" value ="cn.itcast.dao" />
	        <!-- 指定要扫描的mapper继承的接口，不是必须，mapper可以不实现任何接口 -->
	        <property name="markerInterface" value="cn.itcast.dao.SqlMapper"></property>
	        <!-- 指定sqlSessionFactory的名称，注意此处是名称，而不是引用 -->
	        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	   </bean>  
	   
	   <!-- 配置事务管理器,当与mybatis整合时，只能使用jdbc事务管理器 -->
	   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   		<property name="dataSource" ref="dataSource"></property>
	   </bean>
	   
	   <!-- 配置要实现事务增强的方法，以及事务的特性 -->
	   <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
	   		<tx:attributes>
		   		<!-- REQUIRED:表示这些方法必须要运行在事务的环境中 -->
		   		<tx:method name="add*" propagation="REQUIRED" />
			    <tx:method name="append*" propagation="REQUIRED" />
			    <tx:method name="insert*" propagation="REQUIRED" />
			    <tx:method name="save*" propagation="REQUIRED" />
			    <tx:method name="update*" propagation="REQUIRED" />
			    <tx:method name="modify*" propagation="REQUIRED" />
			    <tx:method name="edit*" propagation="REQUIRED" />
			    <tx:method name="delete*" propagation="REQUIRED" />
			    <tx:method name="remove*" propagation="REQUIRED" />
			    <tx:method name="repair" propagation="REQUIRED" />
			    <tx:method name="delAndRepair" propagation="REQUIRED" />
			    <!--  SUPPORTS：表示支持当前事务，如果当前方法没有事务,则以非事务的方式运行,或者将progation属性去掉，改为readOnly=true-->
	            <tx:method name="get*" read-only="true"/>
	      		<tx:method name="find*" read-only="true" />
	      		<tx:method name="load*" read-only="true"/>
	      		<tx:method name="search*" read-only="true" />
	      		<tx:method name="datagrid*" read-only="true" />
	      		<tx:method name="*" read-only="true" />
	   		</tx:attributes>
	   </tx:advice>
	   
	   <!-- 事务增强关联切入点 -->
	   <aop:config>
	   		<aop:pointcut id="transactionPointcut"  expression="execution(* cn.itcast.service..*Impl.*(..))"/>
	   		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
	   </aop:config>
	   
	   <!-- 配置druid监控spring jdbc -->
	  <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	  <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"  scope="prototype">
	    <property name="patterns">
	      <list>
	        <value>cn.itcast.service.impl.*</value>
	      </list>
	    </property>
	  </bean>
	  <aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor"  pointcut-ref="druid-stat-pointcut" />
	  </aop:config>
</beans>